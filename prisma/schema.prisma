generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// category & subCategory
model Collection {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  name      String           @db.VarChar(255)
  slug      String           @unique
  types     CollectionType[]
  parentId  Int?
  parent    Collection?      @relation(name: "ParentChild", fields: [parentId], references: [id])
  children  Collection[]     @relation(name: "ParentChild")
  products  Product[]
}

model Merchant {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @db.VarChar(255)
  email     String    @db.VarChar(255)
  phone     String    @db.VarChar(255)
  brandName String    @db.VarChar(255)
  slug      String    @unique
  products  Product[]
  isActive  Boolean   @default(false)
  status    Status
}

model Product {
  id           String           @id @default(cuid())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  name         String           @db.VarChar(255)
  description  String
  slug         String           @unique
  rate         Float
  published    Boolean          @default(false)
  images       ProductImage[]
  types        CollectionType[]
  collection   Collection       @relation(fields: [collectionId], references: [id])
  collectionId Int
  merchant     Merchant?        @relation(fields: [merchantId], references: [id])
  merchantId   Int?
  prices       ProductPrice[]
}

model ProductImage {
  id        String   @id @default(cuid())
  imageURL  String
  imageBlur String
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model ProductPrice {
  id        String  @id @default(cuid())
  price     Float
  quantity  Float
  unit      String
  Product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  oauth_token              String? @db.Text // Twitter
  oauth_token_secret       String? @db.Text // Twitter
  expires_at               Int?
  refresh_token_expires_in Int? // Github
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  addresses     Address[]
  order         Order[]
}

model Address {
  id        String   @id @default(cuid())
  address   String
  city      String
  state     String
  country   String
  zipCode   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Order {
  id             String         @id @default(cuid())
  user           User?          @relation(fields: [userId], references: [id])
  userId         String
  sessionId      String
  addressId      String
  orderStatus    OrderStatus
  paymentStatus  String
  paymentIntent  String         @unique
  deliveryStatus DeliveryStatus
  paymentAmount  Float
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum OrderStatus {
  OPEN
  COMPLETED
}

enum PaymentStatus {
  UPAID
  PAID
}

enum DeliveryStatus {
  QUEUED
  PREPARED
  SHIPPING
  DELIVERED
}

enum CollectionType {
  CAT
  DOG
  OTHER
}

enum ProductSize {
  EACH
  KG2
  KG4
  KG8
}

enum ProductBrand {
  ROYAL_CANIN
  ADVANCE
  HILLS_PRESCRIPTION_DIET
  ZIWI
  DINE
  KONG
  MEALS_FOR_MUTTS
  PAWS_FOR_LIFE
  SUPERCOAT
  BLACK_HAWK
}

enum Status {
  Waiting_Approval
  Rejected
  Approved
}
